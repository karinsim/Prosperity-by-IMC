import re
import json
import pandas as pd
import matplotlib.pyplot as plt

def read_json_objects(file_name):
    """
    Reads the entire log file and extracts each JSON object using a regex.
    """
    with open(file_name, 'r') as f:
        content = f.read()
    # Extracts JSON objects (using DOTALL to match across newlines)
    json_strs = re.findall(r'\{.*?\}', content, re.DOTALL)
    objects = []
    for s in json_strs:
        try:
            obj = json.loads(s)
            objects.append(obj)
        except json.JSONDecodeError as e:
            print("JSON decode error:", e)
    return objects

def parse_log(json_obj):
    """
    Extracts price pairs from the lambdaLog field of a JSON object.
    Expected format (each pair consists of two lines):
      theoretical price: <value>
      Market mid: <value>
    Returns a list of dictionaries where each dictionary contains a pair.
    """
    lambda_log = json_obj.get("lambdaLog", "")
    lines = [line.strip() for line in lambda_log.splitlines() if line.strip()]
    pairs = []
    # Process two lines at a time (each pair)
    for i in range(0, len(lines), 2):
        try:
            theoretical = float(lines[i].split(":", 1)[-1].strip())
            market = float(lines[i+1].split(":", 1)[-1].strip())
            pairs.append({"Theoretical Price": theoretical, "Market Mid": market})
        except (IndexError, ValueError) as e:
            print(f"Error processing lines {i} and {i+1}: {e}")
    return pairs

def main():
    file_name = "Logs.txt"  # adjust if necessary
    json_objects = read_json_objects(file_name)
    
    # Create a dictionary to aggregate pairs by their index (0 to 4)
    aggregated = {i: [] for i in range(5)}
    
    # Process each JSON object and place each pair (by its order) into the correct bucket
    for obj in json_objects:
        pairs = parse_log(obj)
        # Ensure we only process the expected 5 pairs in each log record
        for idx, pair in enumerate(pairs):
            if idx < 5:
                aggregated[idx].append(pair)
    
    # For each aggregated pair group, create a DataFrame and plot the columns individually.
    for i in range(5):
        df = pd.DataFrame(aggregated[i])
        print(f"Aggregated table for pair index {i+1}:")
        print(df)
        print("\n")
        
        # Plot Theoretical Price vs. its list index (x-axis)
        plt.figure(figsize=(8, 4))
        plt.plot(df.index, df["Theoretical Price"], marker='o', label="Theoretical Price")
        plt.plot(df.index, df["Market Mid"], marker='o', label="Market Mid", color='orange')
        plt.xlabel("List Entry (Index)")
        plt.ylabel("Theoretical Price")
        plt.title(f"Theoretical Price for Pair {i+1}")
        plt.grid(True)
        plt.legend()
        plt.show()

if __name__ == "__main__":
    main()
